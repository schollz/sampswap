// sclang render.scd
(
var mainServer = Server(\sampswap_nrt, NetAddr("127.0.0.1", 57112));
var serverOptions=ServerOptions.new.numOutputBusChannels_(2);
var server;
var score;
serverOptions.sampleRate=48000;
server = Server(\nrt, NetAddr("127.0.0.1", 57114), options:serverOptions);
SynthDef("lpf_rampup", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=LPF.ar(snd,XLine.kr(200,20000,duration));
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("lpf_rampdown", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=LPF.ar(snd,XLine.kr(20000,200,duration));
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("dec_ramp", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=SelectX.ar(Line.kr(0,1,duration/4),[snd,Decimator.ar(snd,8000,8)]);
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("dec", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=Decimator.ar(snd,8000,8);
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("reverberate", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=SelectX.ar(XLine.kr(0,1,duration/4),[snd,Greyhole.ar(snd)]);
	snd=LeakDC.ar(snd);
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("tapedeck", {
	arg out=0,  dur=30,
	amp=0.5,tape_wet=0.9,tape_bias=0.9,saturation=0.9,drive=0.8,
	tape_oversample=1,mode=0,
	dist_wet=0.07,drivegain=0.5,dist_bias=0.5,lowgain=0.1,highgain=0.1,
	shelvingfreq=600,dist_oversample=1,
	hpf=60,hpfqr=0.6,
	lpf=18000,lpfqr=0.6;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd=snd*amp;
	snd=SelectX.ar(Lag.kr(tape_wet,1),[snd,AnalogTape.ar(snd,tape_bias,saturation,drive,tape_oversample,mode)]);	
	snd=SelectX.ar(Lag.kr(dist_wet/10,1),[snd,AnalogVintageDistortion.ar(snd,drivegain,dist_bias,lowgain,highgain,shelvingfreq,dist_oversample)]);				
	snd=RHPF.ar(snd,hpf,hpfqr);
	snd=RLPF.ar(snd,lpf,lpfqr);
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);
SynthDef("filter_in_out", {
	arg out=0,  dur=30;
	var duration=BufDur.ir(0);
	var snd = PlayBuf.ar(2,0);
	snd = RLPF.ar(snd,
		LinExp.kr(EnvGen.kr(Env.new([0.1, 1, 1, 0.1], [2,dur-4,2])),0.1,1,100,20000),
		0.6);
	snd = snd * EnvGen.ar(Env.new([0, 1, 1, 0], [0,dur,0]), doneAction:2);
	Out.ar(out, snd);
}).load(server);

score={
	arg inFile,outFile,synthDefinition,durationScaling,oscCallbackPort;
	Buffer.read(mainServer,inFile,action:{
		arg buf;
		Routine {
			var buffer;
			var score;
			var duration=buf.duration*durationScaling;

			"defining score".postln;
			score = [
				[0.0, ['/s_new', synthDefinition, 1000, 0, 0,  \dur,duration]],
				[0.0, ['/b_allocRead', 0, inFile]],
				[duration, [\c_set, 0, 0]] // dummy to end
			];

			"recording score".postln;
			Score(score).recordNRT(
				outputFilePath: outFile,
				sampleRate: 48000,
				headerFormat: "wav",
				sampleFormat: "int24",
				options: server.options,
				duration: duration,
				action: {
					postln("done rendering: " ++ outFile);
					NetAddr.new("localhost",oscCallbackPort).sendMsg("/quit");
					postln("sent quit")
				}
			);

		}.play;
	});
};
mainServer.waitForBoot({
	Routine {
		var oscExit;
		var oscScore;
		thisProcess.openUDPPort(57113).postln;
		oscExit = OSCFunc({ arg msg, time, addr, recvPort; [msg, time, addr, recvPort].postln; server.free; mainServer.free; 0.exit; }, '/quit',recvPort:57113);
		oscScore = OSCFunc({ arg msg, time, addr, recvPort;
			var inFile=msg[1].asString;
			var outFile=msg[2].asString;
			var synthDefinition=msg[3].asSymbol;
			var durationScaling=msg[4].asFloat;
			var oscCallbackPort=msg[5].asInteger;
			[msg, time, addr, recvPort].postln;
			score.value(inFile,outFile,synthDefinition,durationScaling,oscCallbackPort);
			"finished".postln;
		}, '/score',recvPort:57113);
		1.wait;
		File.new("/tmp/nrt-scready", "w");
		"ready".postln;
	}.play;
});
)
